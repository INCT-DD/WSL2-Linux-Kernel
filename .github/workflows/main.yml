name: Clang/LLVM WSL2-Linux-Kernel Build

on:
  push:
    branches: [ linux-msft-wsl-5.10.y ]
  pull_request:
    branches: [ linux-msft-wsl-5.10.y ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CFLAGS: -O3 -mllvm -polly -mllvm -polly-run-inliner -mllvm -polly-opt-fusion=max -mllvm -polly-omp-backend=LLVM -mllvm -polly-scheduling=dynamic -mllvm -polly-scheduling-chunksize=1 -mllvm -polly-opt-maximize-bands=yes -mllvm -polly-ast-detect-parallel -mllvm -polly-ast-use-context -mllvm -polly-opt-simplify-deps=no -mllvm -polly-rtc-max-arrays-per-group=40 -mllvm -polly-parallel -ffast-math -pipe -fPIE --param=ssp-buffer-size=32 -D_FORTIFY_SOURCE=2 -D_REENTRANT -fassociative-math -fasynchronous-unwind-tables -feliminate-unused-debug-types -Wformat-security -fno-semantic-interposition -fno-signed-zeros -fno-strict-aliasing -fno-trapping-math -m64 -pthread -Wformat-security -fno-stack-protector -fwrapv -funroll-loops -ftree-vectorize -fforce-addr
      LOCALVERSION: -custom
    steps:
      - uses: actions/checkout@v2
      
      - name: Install build tools
        run: |
           sudo apt install build-essential flex bison libelf-dev libssl-dev binutils binutils-i686-gnu binutils-i686-linux-gnu \
           binutils-x86-64-linux-gnu binutils-x86-64-linux-gnux32 -y
      
      - name: Install Clang/LLVM repositories and base tools
        run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
        
      - name: Install the full Clang/LLVM toolchain
        run: |
           sudo apt install libllvm-13-ocaml-dev libllvm13 llvm-13 llvm-13-dev llvm-13-runtime clang-13 clang-tools-13 clang-13-doc \
           libclang-common-13-dev libclang-13-dev libclang1-13 clang-format-13 clangd-13 libfuzzer-13-dev lldb-13 lld-13 libc++-13-dev \
           libc++abi-13-dev libomp-13-dev libclc-13-dev libunwind-13-dev -y

      - name: Setup the Clang/LLVM toolchain symlinks
        run: sudo bash ./update-alternatives-clang.sh 13 100
        
      - name: Copy default kernel build configuration
        run: cp Microsoft/config-wsl .config
        
      - name: Run kernel build preparations
        run: make prepare modules_prepare
        
      - name: Fix license information on include/uapi/misc/d3dkmthk.h
        run: |
           sed -i 's/SPDX-License-Identifier: GPL-2.0/SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note/g' include/uapi/misc/d3dkmthk.h
        
      - name: Enable Clang/LLVM LTO build
        run: scripts/config -e LTO_CLANG_THIN
       
      - name: Build and package kernel
        run: |
           echo "Building with the following compiler arguments: $CFLAGS"
           echo "Current localversion tag: $LOCALVERSION"
           LLVM=1 LLVM_IAS=1 CFLAGS=$CFLAGS LOCALVERSION=$LOCALVERSION make bindeb-pkg -j$(nproc)
           
      - name: Copy .deb packages to the current directory
        run: cp ../*.deb ./
      
      - name: Upload vmlinux artifact
        uses: actions/upload-artifact@v2
        with:
          name: vmlinux
          path: vmlinux
          
      - name: Upload bzImage artifact
        uses: actions/upload-artifact@v2
        with:
          name: bzImage
          path: arch/x86/boot/bzImage
          
      - name: Upload debian packages
        uses: actions/upload-artifact@v2
        with:
          name: debian_packages
          path: ${{ github.workspace }}/*.deb
          
